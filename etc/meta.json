{
    "meta":{
        "name":"Pharinix",
        "slugname":"core",
        "version": "4.08.18",
        "autor": "Copyright (c), 2015-2017, Pedro Pelaez (aaaaa976@gmail.com)",
        "website": "https://github.com/PSF1/pharinix",
        "description": "Light weight framework with many interesting features. Data model with unix like security, configurable with it self, URL rewrite and mapping, etc... it's the perfect backend to your application.",
        "licence": "GNU GENERAL PUBLIC LICENSE Version 2"
    },
    "configuration": {},
    "booting": [],
    "bin_paths": [],
    "nodetypes": {},
    "sql": {},
    "install": [],
    "uninstall": [],
    "requirements": {},
    "platforms":[
        "win",
        "linux"
    ],
    "hooks": [
            {
                "name": "driverUserSessionStarted",
                "description": "Allow react to driverUser::sessionStart after start session. The user session is opened to read/write.",
                "parameters": {}
            },
            {
                "name": "driverUserLikeLogout",
                "description": "Allow react to driverUser::logOut before destroy session. The user session is opened to read/write.",
                "parameters": {}
            },
            {
                "name": "driverUserNewLogin",
                "description": "Allow react to driverUser::logIn when user get login. The user session is opened to read/write.",
                "parameters": {}
            },
            {
                "name": "driverUserPasswordObfuscation",
                "description": "Allow rewrite driverUser::passwordObfuscation response. Obfuscate a password.",
                "parameters": {
                    "pass": "Raw password.",
                    "obfuscated": "Obfuscated password, if empty apply default obfuscation."
                }
            },
            {
                "name": "driverPagesShowAreasHook",
                "description": "Allow rewrite driverPages::showAreas response.",
                "parameters": {
                    "show": "Response by default, it must show areas or not."
                }
            },
            {
                "name": "driverCommandGetAlertHook",
                "description": "Allow rewrite a HTML alert message.",
                "parameters": {
                    "alert": "Response to be echoed to the client.",
                    "msg": "The message to show."
                }
            },
            {
                "name": "urlRewriteHook",
                "description": "Before work over a rewrited URL.",
                "parameters": {
                    "url": "The URL to rewrite.",
                    "canceled": "TRUE to stop normal conversion, we need do a replacement."
                }
            },
            {
                "name": "urlRewriteNotFoundHook",
                "description": "Response if the rewrited not found.",
                "parameters": {
                    "body": "The body to write, default is empty, ''.",
                    "status": "The status header to return, default is 'HTTP/1.0 404 Not Found'."
                }
            },
            {
                "name": "coreDefaultInterfaceHook",
                "description": "If not interface defined by parameters core select echoHtml by default, this Hook allow change that default.",
                "parameters": {
                    "command": "Default command to use how interface, default 'echoHtml'."
                }
            },
            {
                "name": "coreCatchParametersHook",
                "description": "By default Pharinix will expect parameters in POST format, whit this hook we can translate JSON, XML or any other format to POST. It don't have parameters why use superglobal variables.",
                "parameters": {}
            },
            {
                "name": "coreShowDefaultPageHook",
                "description": "Allow change default command to show the default page.",
                "parameters": {
                    "command": "The command to execute, default 'pageToHTML'.",
                    "parameters": "Parameters to the command."
                }
            },
            {
                "name": "coreDefaultCommandHook",
                "description": "Default command to execute when interface is not HTML.",
                "parameters": {
                    "command": "The command to execute, default 'nothing'."
                }
            },
            {
                "name": "driverNodesBeforeAddNodeHook",
                "description": "Before node add.",
                "parameters": {
                    "params": "driverNodes::addNode parameters",
                    "secured": "Apply security"
                }
            },
            {
                "name": "driverNodesAfterAddNodeHook",
                "description": "After node add.",
                "parameters": {
                    "resp": "driverNodes::addNode response",
                    "params": "driverNodes::addNode parameters",
                    "secured": "Apply security"
                }
            },
            {
                "name": "driverNodesBeforeDelNodeHook",
                "description": "Before node delete.",
                "parameters": {
                    "params": "driverNodes::delNode parameters",
                    "secured": "Apply security"
                }
            },
            {
                "name": "driverNodesAfterDelNodeHook",
                "description": "After node delete.",
                "parameters": {
                    "resp": "driverNodes::delNode response",
                    "params": "driverNodes::delNode parameters",
                    "secured": "Apply security"
                }
            },
            {
                "name": "driverNodesBeforeUpdateNodeHook",
                "description": "Before node update.",
                "parameters": {
                    "params": "driverNodes::updateNode parameters",
                    "secured": "Apply security"
                }
            },
            {
                "name": "driverNodesAfterUpdateNodeHook",
                "description": "After node update.",
                "parameters": {
                    "resp": "driverNodes::updateNode response",
                    "params": "driverNodes::updateNode parameters",
                    "secured": "Apply security"
                }
            }
    ]
}
